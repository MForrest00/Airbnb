sqlite_directory <- 'C:/SQLite/Databases/Airbnb.sqlite3'
# Connect to or create SQLite database
abnb_db <- dbConnect(SQLite(), sqlite_directory)
# Find max data scrape mapping ID already in the SQLite database
max_scrape <- dbExecute(abnb_db, 'SELECT MAX(DataScrape_ID) FROM Map_DataScrape;')
# Read listings data and populate into SQLite database
loop <- 1 + max_scrape
while (loop <= (max_scrape + nrow(dir_df))) {
# Repair columns if broken
listings_temp <- readLines(paste(data_directory, '/', dir_df[loop, 1], '/',
dir_df[loop, 2], '/', dir_df[loop, 3], '/',
dir_df[loop, 4], '/listings.csv.gz', sep = ''))
# Fix quoting characters and replace two consecutive double quotes with a single quote
listings_temp <- gsub(',\'"', ',"\'', gsub('""', '\'', listings_temp))
# Write temp data to temporary file
write(listings_temp, file = 'temp.txt', ncolumns = 1)
# Prepare listings data frame
listings <- read.table('temp.txt', sep = ',', quote = '"', header = TRUE, comment.char = '',
stringsAsFactors = FALSE)
# Remove NAs (interpreted as NULL)
listings[is.na(listings)] <- ''
# Create extra data rows
lst_length <- nrow(listings)
id_vec_lst <- rep(NA, lst_length)
map_id_vec_lst <- rep(loop, lst_length)
# Add extra data rows to data frame
listings['Listings_ID'] <- id_vec_lst
listings['DataScrape_ID'] <- map_id_vec_lst
# Set column names
i <- 1
while (i <= length(names(listings))) {
names(listings)[i] <- as.character(listings_df_colnames$listings_db_colnames
[match(names(listings)[i],
listings_df_colnames$listings_ds_colnames)])
i <- i + 1
}
# Fill in missing columns with NA
i <- 1
while (i <= length(listings_df_colnames$listings_db_colnames)) {
if (!is.element(listings_df_colnames$listings_db_colnames[i], names(listings))) {
temp_vec <- rep(NA, lst_length)
listings[as.character(listings_df_colnames$listings_db_colnames[i])] <- temp_vec
}
i <- i + 1
}
# Reorder data frame
i <- 1
name_vec <- vector(mode = 'integer')
while (i <= length(listings_df_colnames$listings_db_colnames)) {
name_vec[i] <- match(listings_df_colnames$listings_db_colnames[i], names(listings))
i <- i + 1
}
listings <- listings[name_vec]
# Strip dollar signs and commas from prices
listings$Price <- gsub(',', '', gsub('\\$', '', listings$Price))
listings$WeeklyPrice <- gsub(',', '', gsub('\\$', '', listings$WeeklyPrice))
listings$MonthlyPrice <- gsub(',', '', gsub('\\$', '', listings$MonthlyPrice))
listings$SecurityDeposit <- gsub(',', '', gsub('\\$', '', listings$SecurityDeposit))
listings$CleaningFee <- gsub(',', '', gsub('\\$', '', listings$CleaningFee))
listings$ExtraPeople <- gsub(',', '', gsub('\\$', '', listings$ExtraPeople))
# Strip percent signs
listings$HostResponseRate <- gsub('%', '', listings$HostResponseRate)
listings$HostAcceptanceRate <- gsub('%', '', listings$HostAcceptanceRate)
# Write listings data frame to SQLite database
dbWriteTable(abnb_db, name = 'Listings', value = listings, append = TRUE)
# Increment loop
loop <- loop + 1
}
dir_vec <- list.files(data_directory, recursive = TRUE)
dir_df <- t(data.frame(strsplit(dir_vec, split = '/'), stringsAsFactors = FALSE))
dir_df <- unique(dir_df[, 1:4])
colnames(dir_df) <- c('Country', 'State', 'City', 'DataScrapeDate')
rownames(dir_df) <- seq.int(1, nrow(dir_df))
head(dir_df, 10)
# Read listings data and populate into SQLite database
loop <- 1 + max_scrape
while (loop <= (max_scrape + nrow(dir_df))) {
# Repair columns if broken
listings_temp <- readLines(paste(data_directory, '/', dir_df[loop, 1], '/',
dir_df[loop, 2], '/', dir_df[loop, 3], '/',
dir_df[loop, 4], '/listings.csv.gz', sep = ''))
# Fix quoting characters and replace two consecutive double quotes with a single quote
listings_temp <- gsub(',\'"', ',"\'', gsub('""', '\'', listings_temp))
# Write temp data to temporary file
write(listings_temp, file = 'temp.txt', ncolumns = 1)
# Prepare listings data frame
listings <- read.table('temp.txt', sep = ',', quote = '"', header = TRUE, comment.char = '',
stringsAsFactors = FALSE)
# Remove NAs (interpreted as NULL)
listings[is.na(listings)] <- ''
# Create extra data rows
lst_length <- nrow(listings)
id_vec_lst <- rep(NA, lst_length)
map_id_vec_lst <- rep(loop, lst_length)
# Add extra data rows to data frame
listings['Listings_ID'] <- id_vec_lst
listings['DataScrape_ID'] <- map_id_vec_lst
# Set column names
i <- 1
while (i <= length(names(listings))) {
names(listings)[i] <- as.character(listings_df_colnames$listings_db_colnames
[match(names(listings)[i],
listings_df_colnames$listings_ds_colnames)])
i <- i + 1
}
# Fill in missing columns with NA
i <- 1
while (i <= length(listings_df_colnames$listings_db_colnames)) {
if (!is.element(listings_df_colnames$listings_db_colnames[i], names(listings))) {
temp_vec <- rep(NA, lst_length)
listings[as.character(listings_df_colnames$listings_db_colnames[i])] <- temp_vec
}
i <- i + 1
}
# Reorder data frame
i <- 1
name_vec <- vector(mode = 'integer')
while (i <= length(listings_df_colnames$listings_db_colnames)) {
name_vec[i] <- match(listings_df_colnames$listings_db_colnames[i], names(listings))
i <- i + 1
}
listings <- listings[name_vec]
# Strip dollar signs and commas from prices
listings$Price <- gsub(',', '', gsub('\\$', '', listings$Price))
listings$WeeklyPrice <- gsub(',', '', gsub('\\$', '', listings$WeeklyPrice))
listings$MonthlyPrice <- gsub(',', '', gsub('\\$', '', listings$MonthlyPrice))
listings$SecurityDeposit <- gsub(',', '', gsub('\\$', '', listings$SecurityDeposit))
listings$CleaningFee <- gsub(',', '', gsub('\\$', '', listings$CleaningFee))
listings$ExtraPeople <- gsub(',', '', gsub('\\$', '', listings$ExtraPeople))
# Strip percent signs
listings$HostResponseRate <- gsub('%', '', listings$HostResponseRate)
listings$HostAcceptanceRate <- gsub('%', '', listings$HostAcceptanceRate)
# Write listings data frame to SQLite database
dbWriteTable(abnb_db, name = 'Listings', value = listings, append = TRUE)
# Increment loop
loop <- loop + 1
}
if (exists(calendar_temp)) {rm(calendar_temp)}
exists(calendar_temp)
?exists
exists('calendar_temp')
exists('abnb_db')
rm(loop)
exists(lst_length)
rm(lst_length)
rM(listings_temp)
rm(listings_temp)
rm(listings)
# Disconnect from SQLite database
dbDisconnect(abnb_db)
getwd()
?SQLite
?dbExistsTable
# Directory for data folder
data_directory <- 'C:/Airbnb'
# Directory and file for SQLite database
sqlite_directory <- 'C:/SQLite/Databases/Airbnb.sqlite3'
# Connect to or create SQLite database
abnb_db <- dbConnect(SQLite(), sqlite_directory)
library(RSQLite)
library(DBI)
# Connect to or create SQLite database
abnb_db <- dbConnect(SQLite(), sqlite_directory)
dbExecute(abnbdb, 'SELECT * FROM Calendar LIMIT 5')
# Connect to or create SQLite database
abnb_db <- dbConnect(SQLite(), sqlite_directory)
# Connect to or create SQLite database
dbExecute(abnbdb, 'SELECT * FROM Calendar LIMIT 5')
dbExecute(abnb_db, 'SELECT * FROM Calendar LIMIT 5')
?RSQLite
dbSendQuery(abnb_db, 'SELECT * FROM Calendar LIMIT 5')
dbFetch(dbSendQuery(abnb_db, 'SELECT * FROM Calendar LIMIT 5'))
install.packages(RMySQL)
install.packages('RMySQL'')
''
install.packages('RMySQL')
# Disconnect from SQLite database
dbDisconnect(abnb_db)
dbClearResults(abnb_db)
?as.Date
# Directory for data folder
data_directory <- 'C:/Airbnb'
dir_vec <- list.files(data_directory, recursive = TRUE)
dir_df <- t(data.frame(strsplit(dir_vec, split = '/'), stringsAsFactors = FALSE))
dir_df <- unique(dir_df[, 1:4])
colnames(dir_df) <- c('Country', 'State', 'City', 'DataScrapeDate')
rownames(dir_df) <- seq.int(1, nrow(dir_df))
dir_df
max(as.Date(dir_df$DataScrapeDate))
max(as.Date(dir_df[, 4]))
paste('This is a test ', max(as.Date(dir_df[, 4])), ' ok!', sep = '')
paste('This is a test ', as.character(max(as.Date(dir_df[, 4])), '%M %d, %y'), ' ok!', sep = '')
paste('This is a test ', as.character(max(as.Date(dir_df[, 4])), '%B %d, %y'), ' ok!', sep = '')
paste('This is a test ', as.character(max(as.Date(dir_df[, 4])), '%B %d, %Y'), ' ok!', sep = '')
nrows(dir_df)
?nrows
nrow(dir_df)
nrow(unique(dir_df[, 1:3]))
nrow(dir_df) * 3
sum(file.info(dir_vec)$size)
dir_vec
sum(file.info(paste(data_directory, dir_vec)$size)
sum(file.info(paste(data_directory, dir_vec)$size))
sum(file.info(paste(data_directory, dir_vec))$size)
file.info(paste(data_directory, dir_vec[1]))
file.info(paste(data_directory, '/', dir_vec[1]))
file.info(paste(data_directory, '/', dir_vec[1], sep = ''))
file.info(paste(data_directory, '/', dir_vec[1], sep = ''))$size
file.info(paste(data_directory, '/', dir_vec[1], sep = ''))$size / 1024^2
sum(file.info(paste(data_directory, '/', dir_vec, sep = ''))$size) / 1024^2
?round
round(sum(file.info(paste(data_directory, '/', dir_vec, sep = ''))$size) / 1024^3, digits = 2_
round(sum(file.info(paste(data_directory, '/', dir_vec, sep = ''))$size) / 1024^3, digits = 2)
round((sum(file.info(paste(data_directory, '/', dir_vec, sep = ''))$size) / 1024^3) * 9.3, digits = 2)
nrow(dir_vec)
?length
length(dir_vec)
# Return top 10 rows of data scrape metadata
head(dir_df, 20)
?dbConnect
library(RSQLite)
library(DBI)
?dbConnect
?readLines
library(RSQLite)
library(RMySQL)
library(DBI)
# Connect to SQLite database
abnb_db_slt <- dbConnect(SQLite(), sqlite_directory)
# Directory and file for SQLite database
sqlite_directory <- 'C:/SQLite/Databases/Airbnb.sqlite3'
# Directory and file for SQLite database
sqlite_directory <- 'C:/SQLite/Databases/Airbnb.sqlite3'
# Connect to SQLite database
abnb_db_slt <- dbConnect(SQLite(), sqlite_directory)
# Load MySQL server address and log-in credentials (replace with your server address and log-in credentials)
mysql_server_address <- readLines('C:/Credentials/AWS MySQL Airbnb Database/serverAddress.txt')
mysql_user_name <- readLines('C:/Credentials/AWS MySQL Airbnb Database/userName.txt')
mysql_password <- readLines('C:/Credentials/AWS MySQL Airbnb Database/password.txt')
# Directory and file for SQLite database
sqlite_directory <- 'C:/SQLite/Databases/Airbnb.sqlite3'
# Connect to SQLite database
abnb_db_slt <- dbConnect(SQLite(), sqlite_directory)
# Load MySQL server address and log-in credentials (replace with your server address and log-in credentials)
mysql_server_address <- readLines('C:/Credentials/AWS MySQL Airbnb Database/serverAddress.txt')
mysql_user_name <- readLines('C:/Credentials/AWS MySQL Airbnb Database/userName.txt')
mysql_password <- readLines('C:/Credentials/AWS MySQL Airbnb Database/password.txt')
mysql_user_name
# Directory and file for SQLite database
sqlite_directory <- 'C:/SQLite/Databases/Airbnb.sqlite3'
# Connect to SQLite database
abnb_db_slt <- dbConnect(SQLite(), sqlite_directory)
# Load MySQL server address and log-in credentials (replace with your server address and log-in credentials)
mysql_server_address <- readLines('C:/Credentials/AWS MySQL Airbnb Database/serverAddress.txt')
mysql_user_name <- readLines('C:/Credentials/AWS MySQL Airbnb Database/userName.txt')
mysql_password <- readLines('C:/Credentials/AWS MySQL Airbnb Database/password.txt')
mysql_user_name
# Directory and file for SQLite database
sqlite_directory <- 'C:/SQLite/Databases/Airbnb.sqlite3'
# Connect to SQLite database
abnb_db_slt <- dbConnect(SQLite(), sqlite_directory)
# Load MySQL server address and log-in credentials (replace with your server address and log-in credentials)
mysql_server_address <- readLines('C:/Credentials/AWS MySQL Airbnb Database/serverAddress.txt')
mysql_user_name <- readLines('C:/Credentials/AWS MySQL Airbnb Database/userName.txt')
mysql_password <- readLines('C:/Credentials/AWS MySQL Airbnb Database/password.txt')
# Connect to MySQL database -- this instance has been launched with a database named 'airbnb'
abnb_db_mys <- dbConnect(MySQL(), dbname = 'airbnb', username = mysql_user_name, password = mysql_password,
host = mysql_server_address)
dbExecute(abnb_db_mys, 'SHOW DATABASES')
# Disconnect from SQLite database
dbDisconnect(abnb_db)
# Disconnect from SQLite database
dbDisconnect(abnb_db_slt)
dbDisconnect(abnb_db_mys)
?write.table
library(RSQLite)
library(RMySQL)
library(DBI)
# Directory and file for SQLite database
sqlite_directory <- 'C:/SQLite/Databases/Airbnb.sqlite3'
# Connect to SQLite database
abnb_db_slt <- dbConnect(SQLite(), sqlite_directory)
# Load MySQL server address and log-in credentials (replace with your server address and log-in credentials)
mysql_server_address <- readLines('C:/Credentials/AWS MySQL Airbnb Database/serverAddress.txt')
mysql_user_name <- readLines('C:/Credentials/AWS MySQL Airbnb Database/userName.txt')
mysql_password <- readLines('C:/Credentials/AWS MySQL Airbnb Database/password.txt')
# Connect to MySQL database -- this instance has been launched with a database named 'airbnb'
abnb_db_mys <- dbConnect(MySQL(), dbname = 'airbnb', username = mysql_user_name, password = mysql_password,
host = mysql_server_address)
idx_datascrape_unique <- 'CREATE UNIQUE INDEX IF NOT EXISTS idx_unique_scrape ON airbnb.Map_DataScrape (
Country
,State
,City
,DataScrapeDate
);
'
dbExecute(abnb_db_mys, idx_datascrape_unique)
idx_datascrape_unique <- 'CREATE UNIQUE INDEX idx_unique_scrape ON airbnb.Map_DataScrape (
Country
,State
,City
,DataScrapeDate
);
'
dbExecute(abnb_db_mys, idx_datascrape_unique)
# Find max data scrape mapping ID already in the SQLite database
max_scrape <- dbExecute(abnb_db_mys, 'SELECT MAX(DataScrape_ID) FROM Map_DataScrape;')
max_scrape
test <- dbSendQuery(abnb_db_mys, 'SELECT MAX(DataScrape_ID) FROM Map_DataScrape;')
dbFetch(test)
test <- dbSendQuery(abnb_db_mys, 'SELECT MAX(DataScrape_ID) FROM airbnb.Map_DataScrape;')
dbFetch(test)
# Find max data scrape mapping ID already in the SQLite database
max_scrape <- dbExecute(abnb_db_mys, 'SELECT MAX(DataScrape_ID) FROM airbnb.Map_DataScrape;')
max_scrape
dbClearResults(test)
dbClearResult(test)
# Find max data scrape mapping ID already in the SQLite database
max_scrape <- dbSendQuery(abnb_db_mys, 'SELECT MAX(DataScrape_ID) FROM airbnb.Map_DataScrape;')
max_scrape <- dbFetch(max_scrape)
dbClearResult(max_scrape)
# Find max data scrape mapping ID already in the SQLite database
max_scrape_temp <- dbSendQuery(abnb_db_mys, 'SELECT MAX(DataScrape_ID) FROM airbnb.Map_DataScrape;')
max_scrape <- dbFetch(max_scrape_temp)
dbClearResult(max_scrape_temp)
if (max_scrape == NA) {max_scrape <- 0}
max_scrape
class(max_scrape)
as.vector(max_scrape)
# Find max data scrape mapping ID already in the SQLite database
max_scrape_temp <- dbSendQuery(abnb_db_mys, 'SELECT MAX(DataScrape_ID) FROM airbnb.Map_DataScrape;')
max_scrape <- dbFetch(max_scrape_temp)
dbClearResult(max_scrape_temp)
if (max_scrape[1, 1] == NA) {max_scrape <- 0}
as.integer(max_scrape)
# Find max data scrape mapping ID already in the SQLite database
max_scrape_temp <- dbSendQuery(abnb_db_mys, 'SELECT MAX(DataScrape_ID) FROM airbnb.Map_DataScrape;')
max_scrape <- dbFetch(max_scrape_temp)
dbClearResult(max_scrape_temp)
if (is.na(as.integer(max_scrape))) {max_scrape <- 0} else {max_scrape <- as.integer(max_scrape)}
max_scrape
calendar_rows <- dbExecute(abnb_db_slt, 'SELECT COUNT(*) FROM Listings;')
calendar_rows
max_scrape <- dbExecute(abnb_db, 'SELECT MAX(DataScrape_ID) FROM Map_DataScrape;')
max_scrape <- dbExecute(abnb_db_slt, 'SELECT MAX(DataScrape_ID) FROM Map_DataScrape;')
max_scrape
# Find max data scrape mapping ID already in the MySQL database
max_scrape_temp <- dbSendQuery(abnb_db_slt, 'SELECT MAX(DataScrape_ID) FROM Map_DataScrape;')
max_scrape <- dbFetch(max_scrape_temp)
dbClearResult(max_scrape_temp)
if (is.na(as.integer(max_scrape))) {max_scrape <- 0} else {max_scrape <- as.integer(max_scrape)}
# Find max data scrape mapping ID already in the MySQL database
table_rows_temp <- dbSendQuery(abnb_db_slt, 'SELECT COUNT(*) AS RowCount FROM Calendar
UNION ALL
SELECT COUNT(*) AS RowCount FROM Listings
UNION ALL
SELECT COUNT(*) AS RowCount FROM Reviews;')
table_rows <- dbFetch(table_rows_temp)
dbClearResult(table_rows_temp)
rownames(table_rows) <- c('Calendar', 'Listings', 'Reviews')
table_rows
?invisible
# Find max data scrape mapping ID already in the MySQL database
table_rows_temp <- dbSendQuery(abnb_db_slt, 'SELECT COUNT(*) AS RowCount FROM Calendar
UNION ALL
SELECT COUNT(*) AS RowCount FROM Listings
UNION ALL
SELECT COUNT(*) AS RowCount FROM Reviews;')
table_rows <- dbFetch(table_rows_temp)
invisible(dbClearResult(table_rows_temp))
rownames(table_rows) <- c('Calendar', 'Listings', 'Reviews')
table_rows
head(table_rows)
getwd()
work_dir <- getwd()
work_dir
class(table_rows)
detach("package:RMySQL", unload=TRUE)
library(RSQLite)
library(RMySQL)
library(DBI)
work_dir_stem <- getwd()
?write.file
?write.table
# Query all content from data scrape mapping table in SQLite
scrape_temp <- dbSendQuery(abnb_db_slt, 'SELECT * FROM Map_DataScrape;')
scrape <- dbFetch(scrape_temp)
dbClearResult(scrape_temp)
write.table(scrape, file = 'scrape_transf.txt', sep = '|', row.names = FALSE, col.names = FALSE)
# Query all content from data scrape mapping table in SQLite
scrape_temp <- dbSendQuery(abnb_db_slt, 'SELECT * FROM Map_DataScrape;')
scrape <- dbFetch(scrape_temp)
dbClearResult(scrape_temp)
write.table(scrape, file = 'scrape_transf.txt', quote = FALSE, sep = '|', row.names = FALSE, col.names = FALSE)
scrape_load_stem1 <- 'LOAD DATA LOCAL INFILE \''
scrape_load_stem2 <- '\' INTO TABLE airbnb.Map_DataScrape
FIELDS TERMINATED BY \'|\'
LINES TERMINATED BY \'\\n\';'
work_dir <- paste(work_dir_stem, '/scrape_transf.txt', sep = '')
paste(scrape_load_stem1, work_dir, scrape_load_stem2, sep = '')
scrape_load_stem2 <- '\' INTO TABLE airbnb.Map_DataScrape
FIELDS TERMINATED BY \'|\'
LINES TERMINATED BY \'\n\';'
paste(scrape_load_stem1, work_dir, scrape_load_stem2, sep = '')
help("dbSendQuery")
# Query all content from data scrape mapping table in SQLite
scrape_temp <- dbSendQuery(abnb_db_slt, 'SELECT * FROM Map_DataScrape;')
scrape <- dbFetch(scrape_temp)
dbClearResult(scrape_temp)
# Write results to temp file
write.table(scrape, file = 'scrape_transf.txt', quote = FALSE, sep = '|', row.names = FALSE, col.names = FALSE)
work_dir <- paste(work_dir_stem, '/scrape_transf.txt', sep = '')
# Read results into MySQL from temp file
scrape_load_stem1 <- 'LOAD DATA LOCAL INFILE \''
scrape_load_stem2 <- '\' INTO TABLE airbnb.Map_DataScrape
FIELDS TERMINATED BY \'|\'
LINES TERMINATED BY \'\n\';'
scrape_load <- dbSendStatement(abnb_db_mys, paste(scrape_load_stem1, work_dir, scrape_load_stem2, sep = ''))
dbClearResult(scrape_load)
# Remove temp file
if (file.exists('scrape_transf.txt')) {file.remove('scrape_transf.txt')}
# Disconnect from SQLite database
dbDisconnect(abnb_db_slt)
dbDisconnect(abnb_db_mys)
calendar_sql <- 'SELECT
Calendar_ID
,DataScrape_ID
,ListingID
,Date
,Available
,CASE WHEN Price = '' THEN 'NULL' ELSE Price END AS Price
FROM Calendar
LIMIT '
''
calendar_sql <- 'SELECT
Calendar_ID
,DataScrape_ID
,ListingID
,Date
,Available
,CASE WHEN Price = \'\' THEN \'NULL\' ELSE Price END AS Price
FROM Calendar
LIMIT '
loop <- 0
batch_size <- 500000
paste(calendar_sql, loop, ', ', batch_size, ';', sep = '')
paste(calendar_sql, loop, ', ', format(batch_size, scientific = FALSE), ';', sep = '')
calendar_sql <- 'SELECT
Calendar_ID
,DataScrape_ID
,ListingID
,Date
,Available
,CASE WHEN Price = \'\' THEN \'NULL\' ELSE Price END AS Price
FROM Calendar
LIMIT '
calendar_sql
?write.table
?data.frame
work_dir_stem <- getwd()
calendar_sql <- 'SELECT
Calendar_ID
,DataScrape_ID
,ListingID
,Date
,Available
,CASE WHEN Price = \'\' THEN \'NULL\' ELSE CAST(Price AS TEXT) END AS Price
FROM Calendar
LIMIT '
work_dir <- paste(work_dir_stem, '/calendar_transf.txt', sep = '')
loop <- 0
batch_size <- 500000
calendar_rows_temp <- dbSendQuery(abnb_db_slt, paste(calendar_sql, format(loop, scientific = FALSE), ', ',
format(batch_size, scientific = FALSE), ';',
sep = ''))
calendar_load_stem1 <- 'LOAD DATA LOCAL INFILE \''
calendar_load_stem2 <- '\' INTO TABLE airbnb.Calendar
FIELDS TERMINATED BY \'|\'
LINES TERMINATED BY \'\n\'
(Calendar_ID, DataScrape_ID, ListingID, Date, Available, @var1)
SET Price = IF(@var1 = \'NULL\', NULL, @var1);'
paste(calendar_load_stem1, work_dir, calendar_load_stem2,
sep = '')
reviews_load_stem1 <- 'LOAD DATA LOCAL INFILE \''
reviews_load_stem2 <- '\' INTO TABLE airbnb.Reviews
FIELDS TERMINATED BY \'|\'
LINES TERMINATED BY \'\r\n\';'
work_dir <- paste(work_dir_stem, '/reviews_transf.txt', sep = '')
paste(reviews_load_stem1, work_dir, reviews_load_stem2,
##                                                    sep = '')
paste(reviews_load_stem1, work_dir, reviews_load_stem2,
##                                                    sep = ''))
)
)
paste(reviews_load_stem1, work_dir, reviews_load_stem2,
sep = '')
?as.data.frame
# R and system environment information
as.data.frame(Sys.info())
as.data.frame(R.Version())
# R and system environment information
as.data.frame(Sys.info())
t(as.data.frame(R.Version()))
# R and system environment information
t(as.data.frame(R.Version()))
# R and system environment information
sys_env <- t(as.data.frame(R.Version()))
sys_env
# R and system environment information
sys_env <- t(as.data.frame(R.Version()))
colnames(sys_env) <- c('Value')
sys_env
