{
    "collab_server" : "",
    "contents" : "## Airbnb Analysis\n\n### Summary\n\n### Data Processing\n\nAll data used in this analysis was downloaded from the [Inside Airbnb](http://insideairbnb.com/) website. Data files are available in the ['Get the Data'](http://insideairbnb.com/get-the-data.html) section of the website. This analysis uses the listings ('listings.csv.gz'), calendar ('calendar.csv.gz'), and reviews ('reviews.csv.gz') files.\n\nData files were downloaded from the [Inside Airbnb](http://insideairbnb.com/) website and placed in a local directory, with a child-folder structure of [Country]/[State]/[City]/[Data Scrape Date ('YYYY-MM-DD')]/[GZ File]. The directory structure used the city, state, and country names from the headers of each scraped city on the ['Get the Data'](http://insideairbnb.com/get-the-data.html) page of the [Inside Airbnb](http://insideairbnb.com/) website. All files for all scrapes of all cities were downloaded as of April 2, 2017, barring the December 2, 2015 scrape of New York City (this scrape contained a broken link for the calendar file). This data encompassed 136 data scrapes for 43 distinct cities. Older scrapes for each city can be removed to cut down on the data size substantially.\n\nThis code uses the directory structure of the data folder to construct the metadata for the scraped data. It is therefore imperative that the directory structure is properly set-up. The listings, calendar, and reviews files must retain their original file names.\n\nFor this first step in the data processing, the data is placed into a local SQLite database. The remaining analysis can either be performed on this SQLite database, or the data can be transferred to another store (e.g. a MySQL server on an AWS RDS instance). Total disk space for the gz files is about 7.95 GBs. Total disk space for the complete SQLite database is about 70 GBs, including the optional indices.\n\n```{r load_libraries_dp, results = 'hide', message = FALSE}\nlibrary(RSQLite)\nlibrary(DBI)\n```\n\n```{r}\n# Directory for data folder\ndata_directory <- 'C:/Airbnb'\n\n# Directory and file for SQLite database\nsqlite_directory <- 'C:/SQLite/Databases/Airbnb.sqlite3'\n```\n\nConnect to or create the SQLite database, check if the data tables already exist, and build the tables if they do not exist\n\n```{r}\n# Connect to or create SQLite database\nabnb_db <- dbConnect(SQLite(), sqlite_directory)\n```\n\n```{r}\n# Check if tables exist\ncalendar_exist <- dbExistsTable(abnb_db, 'Calendar')\nlistings_exist <- dbExistsTable(abnb_db, 'Listings')\nreviews_exist <- dbExistsTable(abnb_db, 'Reviews')\nmap_data_exist <- dbExistsTable(abnb_db, 'Map_DataScrape')\n```\n\n```{r, results = 'hide'}\n# Create tables if they do not exist\nif (calendar_exist == FALSE) {\n    calendar_create <- 'CREATE TABLE Calendar (\n                            Calendar_ID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE,\n                            DataScrape_ID INTEGER NOT NULL,\n                            ListingID INTEGER NOT NULL,\n                            Date DATE NOT NULL,\n                            Available VARCHAR NOT NULL,\n                            Price REAL NOT NULL\n                        );\n                        '\n    dbExecute(abnb_db, calendar_create)\n}\nif (listings_exist == FALSE) {\n    listings_create <- 'CREATE TABLE Listings (\n                            Listings_ID INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL,\n                            DataScrape_ID INTEGER NOT NULL,\n                            ID INTEGER NOT NULL,\n                            ListingURL VARCHAR,\n                            ScrapeID INTEGER,\n                            LastSearched DATE,\n                            LastScraped DATE,\n                            Name TEXT,\n                            Summary TEXT,\n                            Space TEXT,\n                            Description TEXT,\n                            ExperiencesOffered TEXT,\n                            NeighborhoodOverview TEXT,\n                            Notes TEXT,\n                            Transit TEXT,\n                            Access TEXT,\n                            Interaction TEXT,\n                            HouseRules TEXT,\n                            ThumbnailURL VARCHAR,\n                            MediumURL VARCHAR,\n                            PictureURL VARCHAR,\n                            XLPictureURL VARCHAR,\n                            HostID INTEGER,\n                            HostURL VARCHAR,\n                            HostName VARCHAR,\n                            HostSince DATE,\n                            HostLocation VARCHAR,\n                            HostAbout TEXT,\n                            HostResponseTime VARCHAR,\n                            HostResponseRate REAL,\n                            HostAcceptanceRate REAL,\n                            HostIsSuperhost VARCHAR,\n                            HostThumbnailURL VARCHAR,\n                            HostPictureURL VARCHAR,\n                            HostNeighborhood VARCHAR,\n                            HostListingsCount INTEGER,\n                            HostTotalListingsCount INTEGER,\n                            HostVerifications VARCHAR,\n                            HostHasProfilePic VARCHAR,\n                            HostIdentityVerified VARCHAR,\n                            Street VARCHAR,\n                            Neighborhood VARCHAR,\n                            NeighborhoodCleansed VARCHAR,\n                            NeighborhoodGroupCleansed VARCHAR,\n                            City VARCHAR,\n                            State VARCHAR,\n                            ZipCode VARCHAR,\n                            Market VARCHAR,\n                            SmartLocation VARCHAR,\n                            CountryCode VARCHAR,\n                            Country VARCHAR,\n                            Latitude VARCHAR,\n                            Longitude VARCHAR,\n                            IsLocationExact VARCHAR,\n                            PropertyType VARCHAR,\n                            RoomType VARCHAR,\n                            Accommodates INTEGER,\n                            Bathrooms INTEGER,\n                            Bedrooms INTEGER,\n                            Beds INTEGER,\n                            BedType VARCHAR,\n                            Amenities VARCHAR,\n                            SquareFeet REAL,\n                            Price REAL,\n                            WeeklyPrice REAL,\n                            MonthlyPrice REAL,\n                            SecurityDeposit REAL,\n                            CleaningFee REAL,\n                            GuestsIncluded INTEGER,\n                            ExtraPeople REAL,\n                            MinimumNights INTEGER,\n                            MaximumNights INTEGER,\n                            CalendarUpdated VARCHAR,\n                            HasAvailability VARCHAR,\n                            Availability30 INTEGER,\n                            Availability60 INTEGER,\n                            Availability90 INTEGER,\n                            Availability365 INTEGER,\n                            CalendarLastScraped DATE,\n                            NumberOfReviews INTEGER,\n                            FirstReview DATE,\n                            LastReview DATE,\n                            ReviewScoresRating INTEGER,\n                            ReviewScoresAccuracy INTEGER,\n                            ReviewScoresCleanliness INTEGER,\n                            ReviewScoresCheckIn INTEGER,\n                            ReviewScoresCommunication INTEGER,\n                            ReviewScoresLocation INTEGER,\n                            ReviewScoresValue INTEGER,\n                            RequiresLicense VARCHAR,\n                            License VARCHAR,\n                            JurisdictionNames VARCHAR,\n                            InstantBookable VARCHAR,\n                            CancellationPolicy VARCHAR,\n                            RequireGuestProfilePicture VARCHAR,\n                            RequireGuestPhoneVerification VARCHAR,\n                            RegionID INTEGER,\n                            RegionName VARCHAR,\n                            RegionParentID INTEGER,\n                            CalculatedHostListingsCount INTEGER,\n                            ReviewsPerMonth REAL\n                        );\n                        '\n    dbExecute(abnb_db, listings_create)\n}\nif (reviews_exist == FALSE) {\n    reviews_create <- 'CREATE TABLE Reviews (\n                           Reviews_ID INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL,\n                           DataScrape_ID INTEGER NOT NULL,\n                           ListingID INTEGER NOT NULL,\n                           ID INTEGER NOT NULL,\n                           Date DATE NOT NULL,\n                           ReviewerID INTEGER NOT NULL,\n                           ReviewerName VARCHAR NOT NULL,\n                           Comments TEXT NOT NULL\n                       );\n                       '\n    dbExecute(abnb_db, reviews_create)\n}\nif (map_data_exist == FALSE) {\n    map_data_create <- 'CREATE TABLE Map_DataScrape (\n                            DataScrape_ID INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL,\n                            Country VARCHAR NOT NULL,\n                            State VARCHAR NOT NULL,\n                            City VARCHAR NOT NULL,\n                            DataScrapeDate DATE NOT NULL\n                        );\n                        '\n    dbExecute(abnb_db, map_data_create)\n}\n```\n\nAdd unique index to mapping table, to prevent duplication of scrapes in event of multiple runs\n\n```{r, results = 'hide'}\nidx_datascrape_unique <- 'CREATE UNIQUE INDEX IF NOT EXISTS idx_unique_scrape ON Map_DataScrape (\n                              Country\n                              ,State\n                              ,City\n                              ,DataScrapeDate\n                          );\n                          '\ndbExecute(abnb_db, idx_datascrape_unique)\n```\n\nInvestigate directory structure of data folder, and create scrape metadata from folder names\n\n```{r, comment = ''}\ndir_vec <- list.files(data_directory, recursive = TRUE)\ndir_df <- t(data.frame(strsplit(dir_vec, split = '/'), stringsAsFactors = FALSE))\ndir_df <- unique(dir_df[, 1:4])\ncolnames(dir_df) <- c('Country', 'State', 'City', 'DataScrapeDate')\nrownames(dir_df) <- seq.int(1, nrow(dir_df))\nhead(dir_df, 10)\n```\n\n```{r}\n# Find max data scrape mapping ID already in the SQLite database\nmax_scrape <- dbExecute(abnb_db, 'SELECT MAX(DataScrape_ID) FROM Map_DataScrape;')\n```\n\nDefine column name data frame for listings table (listings files differ from one city and scrape to another -- this step and several steps within the read code for the listings data must be completed in order to maintain consistency across different data files)\n\n```{r}\n# Possible column names for listings data from gz source files\nlistings_ds_colnames <- c('Listings_ID', 'DataScrape_ID', 'id', 'listing_url', 'scrape_id', 'last_searched',\n                          'last_scraped', 'name', 'summary', 'space', 'description', 'experiences_offered',\n                          'neighborhood_overview', 'notes', 'transit', 'access', 'interaction', 'house_rules',\n                          'thumbnail_url', 'medium_url', 'picture_url', 'xl_picture_url', 'host_id',\n                          'host_url', 'host_name', 'host_since', 'host_location', 'host_about',\n                          'host_response_time', 'host_response_rate', 'host_acceptance_rate',\n                          'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_neighbourhood',\n                          'host_listings_count', 'host_total_listings_count', 'host_verifications',\n                          'host_has_profile_pic', 'host_identity_verified', 'street', 'neighbourhood',\n                          'neighbourhood_cleansed', 'neighbourhood_group_cleansed', 'city', 'state',\n                          'zipcode', 'market', 'smart_location', 'country_code', 'country', 'latitude',\n                          'longitude', 'is_location_exact', 'property_type', 'room_type', 'accommodates',\n                          'bathrooms', 'bedrooms', 'beds', 'bed_type', 'amenities', 'square_feet', 'price',\n                          'weekly_price', 'monthly_price', 'security_deposit', 'cleaning_fee',\n                          'guests_included', 'extra_people', 'minimum_nights', 'maximum_nights',\n                          'calendar_updated', 'has_availability', 'availability_30', 'availability_60',\n                          'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews',\n                          'first_review', 'last_review', 'review_scores_rating', 'review_scores_accuracy',\n                          'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication',\n                          'review_scores_location', 'review_scores_value', 'requires_license', 'license',\n                          'jurisdiction_names', 'instant_bookable', 'cancellation_policy',\n                          'require_guest_profile_picture', 'require_guest_phone_verification', 'region_id',\n                          'region_name', 'region_parent_id', 'calculated_host_listings_count',\n                          'reviews_per_month')\n\n# Column names for listings data from the SQLite database\nlistings_db_colnames <- c('Listings_ID', 'DataScrape_ID', 'ID', 'ListingURL', 'ScrapeID', 'LastSearched',\n                          'LastScraped', 'Name', 'Summary', 'Space', 'Description', 'ExperiencesOffered',\n                          'NeighborhoodOverview', 'Notes', 'Transit', 'Access', 'Interaction', 'HouseRules',\n                          'ThumbnailURL', 'MediumURL', 'PictureURL', 'XLPictureURL', 'HostID',\n                          'HostURL', 'HostName', 'HostSince', 'HostLocation', 'HostAbout',\n                          'HostResponseTime', 'HostResponseRate', 'HostAcceptanceRate',\n                          'HostIsSuperhost', 'HostThumbnailURL', 'HostPictureURL', 'HostNeighborhood',\n                          'HostListingsCount', 'HostTotalListingsCount', 'HostVerifications',\n                          'HostHasProfilePic', 'HostIdentityVerified', 'Street', 'Neighborhood',\n                          'NeighborhoodCleansed', 'NeighborhoodGroupCleansed', 'City', 'State',\n                          'ZipCode', 'Market', 'SmartLocation', 'CountryCode', 'Country', 'Latitude',\n                          'Longitude', 'IsLocationExact', 'PropertyType', 'RoomType', 'Accommodates',\n                          'Bathrooms', 'Bedrooms', 'Beds', 'BedType', 'Amenities', 'SquareFeet', 'Price',\n                          'WeeklyPrice', 'MonthlyPrice', 'SecurityDeposit', 'CleaningFee',\n                          'GuestsIncluded', 'ExtraPeople', 'MinimumNights', 'MaximumNights',\n                          'CalendarUpdated', 'HasAvailability', 'Availability30', 'Availability60',\n                          'Availability90', 'Availability365', 'CalendarLastScraped', 'NumberOfReviews',\n                          'FirstReview', 'LastReview', 'ReviewScoresRating', 'ReviewScoresAccuracy',\n                          'ReviewScoresCleanliness', 'ReviewScoresCheckIn', 'ReviewScoresCommunication',\n                          'ReviewScoresLocation', 'ReviewScoresValue', 'RequiresLicense', 'License',\n                          'JurisdictionNames', 'InstantBookable', 'CancellationPolicy',\n                          'RequireGuestProfilePicture', 'RequireGuestPhoneVerification', 'RegionID',\n                          'RegionName', 'RegionParentID', 'CalculatedHostListingsCount',\n                          'ReviewsPerMonth')\n\n# Combine gz file data source and SQLite column names for listings data into mapping data frame\nlistings_df_colnames <- data.frame(listings_ds_colnames, listings_db_colnames)\n```\n\nLoop through all directories (as defined in dir_df matrix), read all gz files, and populated data into the SQLite database\n\n```{r calendar, results = 'hide', eval = TRUE}\n# Read calendar data and populate into SQLite database\nloop <- 1 + max_scrape\nwhile (loop <= (max_scrape + nrow(dir_df))) {\n    # Repair columns if broken\n    calendar_temp <- readLines(paste(data_directory, '/', dir_df[loop, 1], '/',\n                                     dir_df[loop, 2], '/', dir_df[loop, 3], '/',\n                                     dir_df[loop, 4], '/calendar.csv.gz', sep = ''))\n    # Replace two consecutive double quotes with one double quote and wrap currency figures in a double quote\n    calendar_temp <- gsub('\"\"', '\"', gsub('([$][0-9,.]+)', '\"\\\\1\"', calendar_temp))\n    # Write temp data to temporary file\n    write(calendar_temp, file = 'temp.txt', ncolumns = 1)\n    # Prepare calendar data frame\n    calendar <- read.table('temp.txt', sep = ',', quote = '\"', header = TRUE, comment.char = '',\n                           stringsAsFactors = FALSE)\n    # Remove NAs (interpreted as NULL)\n    calendar[is.na(calendar)] <- ''\n    # Create extra data rows\n    cal_length <- nrow(calendar)\n    id_vec_cal <- rep(NA, cal_length)\n    map_id_vec_cal <- rep(loop, cal_length)\n    # Bind data frame\n    calendar <- cbind.data.frame(id_vec_cal, map_id_vec_cal, calendar)\n    # Set column names\n    names(calendar) <- c('Calendar_ID', 'DataScrape_ID', 'ListingID', 'Date', 'Available', 'Price')\n    # Strip dollar signs and commas from prices\n    calendar$Price <- gsub(',', '', gsub('\\\\$', '', calendar$Price))\n    # Write calendar data frame to SQLite database\n    dbWriteTable(abnb_db, name = 'Calendar', value = calendar, append = TRUE)\n    \n    # Increment loop\n    loop <- loop + 1\n}\n\n# Remove temp file and large objects\nif (file.exists('temp.txt')) {file.remove('temp.txt')}\nif (exists('calendar_temp')) {rm(calendar_temp)}\nif (exists('calendar')) {rm(calendar)}\n```\n\n```{r listings, results = 'hide', eval = TRUE}\n# Read listings data and populate into SQLite database\nloop <- 1 + max_scrape\nwhile (loop <= (max_scrape + nrow(dir_df))) {\n    # Repair columns if broken\n    listings_temp <- readLines(paste(data_directory, '/', dir_df[loop, 1], '/',\n                                     dir_df[loop, 2], '/', dir_df[loop, 3], '/',\n                                     dir_df[loop, 4], '/listings.csv.gz', sep = ''))\n    # Fix quoting characters and replace two consecutive double quotes with a single quote\n    listings_temp <- gsub(',\\'\"', ',\"\\'', gsub('\"\"', '\\'', listings_temp))\n    # Write temp data to temporary file\n    write(listings_temp, file = 'temp.txt', ncolumns = 1)\n    # Prepare listings data frame\n    listings <- read.table('temp.txt', sep = ',', quote = '\"', header = TRUE, comment.char = '',\n                           stringsAsFactors = FALSE)\n    # Remove NAs (interpreted as NULL)\n    listings[is.na(listings)] <- ''\n    # Create extra data rows\n    lst_length <- nrow(listings)\n    id_vec_lst <- rep(NA, lst_length)\n    map_id_vec_lst <- rep(loop, lst_length)\n    # Add extra data rows to data frame\n    listings['Listings_ID'] <- id_vec_lst\n    listings['DataScrape_ID'] <- map_id_vec_lst\n    # Set column names\n    i <- 1\n    while (i <= length(names(listings))) {\n        names(listings)[i] <- as.character(listings_df_colnames$listings_db_colnames\n                                           [match(names(listings)[i],\n                                                  listings_df_colnames$listings_ds_colnames)])\n        i <- i + 1\n    }\n    # Fill in missing columns with NA\n    i <- 1\n    while (i <= length(listings_df_colnames$listings_db_colnames)) {\n        if (!is.element(listings_df_colnames$listings_db_colnames[i], names(listings))) {\n            temp_vec <- rep(NA, lst_length)\n            listings[as.character(listings_df_colnames$listings_db_colnames[i])] <- temp_vec\n        }\n        i <- i + 1\n    }\n    # Reorder data frame\n    i <- 1\n    name_vec <- vector(mode = 'integer')\n    while (i <= length(listings_df_colnames$listings_db_colnames)) {\n        name_vec[i] <- match(listings_df_colnames$listings_db_colnames[i], names(listings))\n        i <- i + 1\n    }\n    listings <- listings[name_vec]\n    # Strip dollar signs and commas from prices\n    listings$Price <- gsub(',', '', gsub('\\\\$', '', listings$Price))\n    listings$WeeklyPrice <- gsub(',', '', gsub('\\\\$', '', listings$WeeklyPrice))\n    listings$MonthlyPrice <- gsub(',', '', gsub('\\\\$', '', listings$MonthlyPrice))\n    listings$SecurityDeposit <- gsub(',', '', gsub('\\\\$', '', listings$SecurityDeposit))\n    listings$CleaningFee <- gsub(',', '', gsub('\\\\$', '', listings$CleaningFee))\n    listings$ExtraPeople <- gsub(',', '', gsub('\\\\$', '', listings$ExtraPeople))\n    # Strip percent signs\n    listings$HostResponseRate <- gsub('%', '', listings$HostResponseRate)\n    listings$HostAcceptanceRate <- gsub('%', '', listings$HostAcceptanceRate)\n    # Write listings data frame to SQLite database\n    dbWriteTable(abnb_db, name = 'Listings', value = listings, append = TRUE)\n    \n    # Increment loop\n    loop <- loop + 1\n}\n\n# Remove temp file and large objects\nif (file.exists('temp.txt')) {file.remove('temp.txt')}\nif (exists('listings_temp')) {rm(listings_temp)}\nif (exists('listings')) {rm(listings)}\n```\n\n```{r reviews, results = 'hide', eval = TRUE}\n# Read reviews data and populate into SQLite database\nloop <- 1 + max_scrape\nwhile (loop <= (max_scrape + nrow(dir_df))) {\n    # Prepare reviews data frame\n    reviews <- read.table(paste(data_directory, '/', dir_df[loop, 1], '/',\n                                dir_df[loop, 2], '/', dir_df[loop, 3], '/',\n                                dir_df[loop, 4], '/reviews.csv.gz', sep = ''),\n                          sep = ',', quote = '\"', header = TRUE, comment.char = '',\n                          stringsAsFactors = FALSE)\n    reviews[is.na(reviews)] <- ''\n    # Create extra data rows\n    rvw_length <- nrow(reviews)\n    id_vec_rvw <- rep(NA, rvw_length)\n    map_id_vec_rvw <- rep(loop, rvw_length)\n    # Bind data frame\n    reviews <- cbind.data.frame(id_vec_rvw, map_id_vec_rvw, reviews)\n    # Set column names\n    names(reviews) <- c('Reviews_ID', 'DataScrape_ID', 'ListingID', 'ID', 'Date', 'ReviewerID',\n                        'ReviewerName', 'Comments')\n    # Write reviews data frame to SQLite database\n    dbWriteTable(abnb_db, name = 'Reviews', value = reviews, append = TRUE)\n    \n    # Increment loop\n    loop <- loop + 1\n}\n\n# Remove large objects\nif (exists('reviews')) {rm(reviews)}\n```\n\n```{r scrape, results = 'hide', eval = TRUE}\n# Create data scrape mapping table\nscrape_seq <- seq(1 + max_scrape, (max_scrape + nrow(dir_df)))\ndata_scrape <- cbind.data.frame(scrape_seq, dir_df)\n# Set column names\ncolnames(data_scrape) <- c('DataScrape_ID', 'Country', 'State', 'City', 'DataScrapeDate')\n# Write data scrape mapping data frame to SQLite database\ndbWriteTable(abnb_db, name = 'Map_DataScrape', value = data_scrape, append = TRUE, row.names = FALSE)\n```\n\n**Optional:** Create database indices for faster querying\n\n```{r index, results = 'hide', eval = TRUE}\n# Data scrape ID indices\nidx_datascrape_id <- 'CREATE INDEX IF NOT EXISTS idx_DataScrape_ID ON Map_DataScrape (\n                          DataScrape_ID\n                      );\n                      '\ndbExecute(abnb_db, idx_datascrape_id)\nidx_datascrape_id_cal <- 'CREATE INDEX IF NOT EXISTS idx_DataScrape_ID_cal ON Calendar (\n                              DataScrape_ID\n                          );\n                          '\ndbExecute(abnb_db, idx_datascrape_id_cal)\nidx_datascrape_id_lst <- 'CREATE INDEX IF NOT EXISTS idx_DataScrape_ID_lst ON Listings (\n                              DataScrape_ID\n                          );\n                          '\ndbExecute(abnb_db, idx_datascrape_id_lst)\nidx_datascrape_id_rvw <- 'CREATE INDEX IF NOT EXISTS idx_DataScrape_ID_rvw ON Reviews (\n                              DataScrape_ID\n                          );\n                          '\ndbExecute(abnb_db, idx_datascrape_id_rvw)\n\n# Listing ID indices\nidx_listing_id_cal <- 'CREATE INDEX IF NOT EXISTS idx_Listing_ID_cal ON Calendar (\n                           ListingID\n                       );\n                       '\ndbExecute(abnb_db, idx_listing_id_cal)\nidx_listing_id_lst <- 'CREATE INDEX IF NOT EXISTS idx_Listing_ID_lst ON Listings (\n                           ID\n                       );\n                       '\ndbExecute(abnb_db, idx_listing_id_lst)\nidx_listing_id_rvw <- 'CREATE INDEX IF NOT EXISTS idx_Listing_ID_rvw ON Reviews (\n                           ListingID\n                       );\n                       '\ndbExecute(abnb_db, idx_listing_id_rvw)\n```\n\nDisconnect from the SQLite database\n\n```{r, results = 'hide'}\n# Disconnect from SQLite database\ndbDisconnect(abnb_db)\n```\n\n### Analysis",
    "created" : 1491141687045.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "587671758",
    "id" : "8174118D",
    "lastKnownWriteTime" : 1491163045,
    "last_content_update" : 1491163045986,
    "path" : "C:/Git/Repo/Airbnb/Airbnb.Rmd",
    "project_path" : "Airbnb.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}